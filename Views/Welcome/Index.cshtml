@{
    ViewData["Title"] = "Welcome";
}

<div class="container mt-4">
    <div class="card shadow p-4 text-center">
        <h2 class="mb-3">Welcome, @User.Identity?.Name!</h2>
        <p class="text-muted">Thank you for logging in. You can now explore the application.</p>
        <div class="d-flex justify-content-center gap-2">
            <a class="btn btn-primary" asp-controller="Chats" asp-action="Friendshub">Chat</a>
        </div>
    </div>
    <div class="container mt-4">
        <div class="d-flex flex-wrap gap-4">
            <!-- Search Friends Card -->
            @await Component.InvokeAsync("Friends")
            <!-- Chatbot UI -->
            @await Component.InvokeAsync("Chatbot")
        </div>
    </div>


    <div class="container mt-4">
        <h5>Pending Friend Requests</h5>
        <ul id="pendingRequests" class="list-group"></ul>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            loadPendingRequests();

            async function loadPendingRequests() {
                try {
                    const response = await fetch('/Friendships/PendingRequests');
                    if (!response.ok) throw new Error("Failed to fetch requests");

                    const requests = await response.json();
                    const pendingRequests = document.getElementById("pendingRequests");
                    pendingRequests.innerHTML = "";

                    if (requests.length === 0) {
                        pendingRequests.innerHTML = `<li class="list-group-item text-muted">No pending requests.</li>`;
                        return;
                    }

                    requests.forEach(request => {
                        const li = document.createElement("li");
                        li.className = "list-group-item d-flex justify-content-between align-items-center";
                        li.innerHTML = `
                        ${request.senderName}
                        <div>
                            <button class="btn btn-success btn-sm accept-btn" data-id="${request.id}">Accept</button>
                            <button class="btn btn-danger btn-sm decline-btn" data-id="${request.id}">Decline</button>
                        </div>
                    `;
                        pendingRequests.appendChild(li);
                    });

                    document.querySelectorAll(".accept-btn").forEach(button => {
                        button.addEventListener("click", () => acceptRequest(button.dataset.id));
                    });

                    document.querySelectorAll(".decline-btn").forEach(button => {
                        button.addEventListener("click", () => declineRequest(button.dataset.id));
                    });
                } catch (error) {
                    console.error("Error fetching friend requests:", error);
                }
            }

            async function acceptRequest(friendshipId) {
                try {
                    const response = await fetch("/Friendships/AcceptRequest", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ friendshipId: friendshipId }) // Correct format
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        alert("Error: " + errorText);
                        return;
                    }

                    alert("Friend request accepted!");
                    loadPendingRequests();
                } catch (error) {
                    console.error("Error accepting friend request:", error);
                }
            }


            async function declineRequest(friendshipId) {
                try {
                    const response = await fetch("/Friendships/DeclineRequest", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ friendshipId: friendshipId })
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        console.log("Error: " + errorText);
                        return;
                    }

                    alert("Friend request declined.");
                    loadPendingRequests();
                } catch (error) {
                    console.error("Error declining friend request:", error);
                }
            }
        });
    </script>



    <div class="container mt-4">
        <h5>All Friends</h5>
        <ul id="friendsList" class="list-group"></ul>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            loadFriendsList(); // Fetch and display friends

            async function loadFriendsList() {
                try {
                    const response = await fetch('/Friendships/FriendsList');
                    if (!response.ok) throw new Error("Failed to fetch friends");

                    const friends = await response.json();
                    const friendsList = document.getElementById("friendsList");
                    friendsList.innerHTML = "";

                    if (friends.length === 0) {
                        friendsList.innerHTML = `<li class="list-group-item text-muted">No friends yet.</li>`;
                        return;
                    }

                    friends.forEach(friend => {
                        const li = document.createElement("li");
                        li.className = "list-group-item d-flex justify-content-between align-items-center";
                        li.innerHTML = `
                        ${friend.name}
                        <button class="btn btn-danger btn-sm remove-btn" data-id="${friend.id}">Remove</button>
                    `;
                        friendsList.appendChild(li);
                    });

                    document.querySelectorAll(".remove-btn").forEach(button => {
                        button.addEventListener("click", () => removeFriend(button.dataset.id));
                    });

                } catch (error) {
                    console.error("Error fetching friends list:", error);
                }
            }

            async function removeFriend(friendId) {
                if (!confirm("Are you sure you want to remove this friend?")) return;

                try {
                    const response = await fetch("/Friendships/RemoveFriend", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ friendId: friendId })
                    });

                    if (!response.ok) {
                        const errorText = await response.text();
                        console.log("Error: " + errorText);
                        return;
                    }

                    alert("Friend removed!");
                    loadFriendsList();
                } catch (error) {
                    console.log("Error removing friend:", error);
                }
            }
        });
    </script>
