@{
    ViewData["Title"] = "Chat";
}

<h2>Chat with <span id="friendName"></span></h2>
<a href="@Url.Action("FriendsHub", "Chats")">⬅ Back to Friends</a>

<div id="chat-container">
    <div id="chat-header">Chat with <span id="friendName"></span></div>

    <div id="chat-box">
        <!-- Messages will load here -->
    </div>

    <div id="chat-input-container">
        <textarea id="messageContent" placeholder="Type a message..." rows="1"></textarea>
        <button id="sendButton">➤</button>
    </div>
</div>

<input type="hidden" id="friendId" value="@ViewBag.FriendId" />
<input type="hidden" id="userId" value="@ViewBag.UserId" />

<!--
<div id="chat-box"
    style="border:1px solid #ccc; height:400px; overflow-y:scroll; padding:10px; display:flex; flex-direction:column;">
    <!-- Messages will load here 
</div>



<div>
    <textarea id="messageContent" placeholder="Type a message..." style="width:80%;"></textarea>
    <button id="sendButton">Send</button>
</div>
-->

<!-- Add SignalR client library -->
<script src="~/lib/microsoft/signalr/signalr.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    document.getElementById("friendName").textContent = "@ViewBag.FriendName";
</script>


<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f5f5f5;
    }

    #chat-container {
        width: 400px;
        margin: 20px auto;
        background: white;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    #chat-header {
        background: #0084ff;
        color: white;
        padding: 15px;
        text-align: center;
        font-weight: bold;
    }

    #chat-box {
        height: 400px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        padding: 15px;
        background-color: #e5ddd5;
    }

    .message {
        max-width: 70%;
        padding: 10px;
        border-radius: 15px;
        margin-bottom: 10px;
        font-size: 14px;
        line-height: 1.4;
        position: relative;
        display: flex;
        flex-direction: column;
    }

    .me {
        align-self: flex-end;
        background: #dcf8c6;
        border-bottom-right-radius: 5px;
    }

    .friend {
        align-self: flex-start;
        background: #fff;
        border-bottom-left-radius: 5px;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }

    .timestamp {
        font-size: 0.75em;
        color: #555;
        margin-top: 5px;
        align-self: flex-end;
    }

    #chat-input-container {
        display: flex;
        align-items: center;
        padding: 10px;
        background: #ffffff;
        border-top: 1px solid #ddd;
    }

    #messageContent {
        flex-grow: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 20px;
        outline: none;
        resize: none;
        font-size: 14px;
    }

    #sendButton {
        margin-left: 10px;
        background: #0084ff;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 50%;
        font-size: 16px;
        cursor: pointer;
    }

    #sendButton:hover {
        background: #006fd6;
    }
</style>

<!--

<style>
    .message {
        padding: 10px;
        margin: 8px;
        border-radius: 15px;
        max-width: 70%;
        position: relative;
    }

    .me {
        background: #dcf8c6;
        align-self: flex-end;
        text-align: right;
        border-bottom-right-radius: 5px;
        /* Creates a tail effect */
    }

    .friend {
        background: #e3e3e3;
        align-self: flex-start;
        text-align: left;
        border-bottom-left-radius: 5px;
        /* Creates a tail effect */
    }

    .timestamp {
        font-size: 0.7em;
        color: #888;
        display: block;
        margin-top: 5px;
    }
</style>
-->
<script>
    $(document).ready(function () {
        const userId = $("#userId").val();
        const friendId = $("#friendId").val();
        const friendName = $("#friendName").text();

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .configureLogging(signalR.LogLevel.Information)
            .withAutomaticReconnect()
            .build();

        function addMessageToChat(message) {
            const chatBox = $("#chat-box");
            const isMine = message.senderId === userId;
            const senderName = isMine ? "You" : friendName;
            const timestamp = new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            const msgDiv = $("<div>")
                .addClass("message")
                .addClass(isMine ? "me" : "friend")
                .html(`<b>${senderName}:</b> ${message.content}<span class="timestamp">${timestamp}</span>`);

            chatBox.append(msgDiv);
            chatBox.scrollTop(chatBox[0].scrollHeight);
        }

        function loadMessages() {
            $.ajax({
                url: `/Chats/GetMessages?friendId=${friendId}`,
                method: 'GET',
                success: function (messages) {
                    $("#chat-box").empty();
                    messages.reverse().forEach(addMessageToChat);
                },
                error: function (error) {
                    console.error("Error fetching messages:", error);
                }
            });
        }

        connection.on("ReceiveMessage", function (message) {
            console.log("Message received via SignalR:", message);
            addMessageToChat(message);
        });

        function sendMessage() {
            const content = $("#messageContent").val().trim();
            if (!content) return;

            const messageData = {
                receiverId: friendId,
                content: content
            };

            $.ajax({
                url: '/Chats/SendMessage',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(messageData),
                success: function (data) {
                    $("#messageContent").val("");
                    // SignalR will handle the new message
                },
                error: function (error) {
                    console.error("Error sending message:", error);
                }
            });
        }

        $("#messageContent").keypress(function (event) {
            if (event.key === "Enter" && !event.shiftKey) {
                event.preventDefault();
                sendMessage();
            }
        });

        $("button").click(sendMessage);

        connection.start()
            .then(function () {
                console.log("SignalR Connected");
                loadMessages();
            })
            .catch(function (err) {
                console.error("SignalR Connection Error: ", err);
                loadMessages();
                setInterval(loadMessages, 5000);
            });
    });
</script>

<!--

<script>
    const userId = document.getElementById("userId").value;
    const friendId = document.getElementById("friendId").value;
    const friendName = document.getElementById("friendName").textContent;

    // Create a connection to the SignalR hub
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .configureLogging(signalR.LogLevel.Information)
        .withAutomaticReconnect()
        .build();

    // Function to add a message to the chat box
    function addMessageToChat(message) {
        const chatBox = document.getElementById("chat-box");
        const isMine = message.senderId === userId;
        const senderName = isMine ? "You" : friendName;

        const msgDiv = document.createElement("div");
        msgDiv.classList.add("message", isMine ? "me" : "friend");

        // Format the timestamp
        const timestamp = new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

        msgDiv.innerHTML = `
            <b>${senderName}:</b> ${message.content}
            <span class="timestamp">${timestamp}</span>
        `;

        chatBox.appendChild(msgDiv);
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    // Load initial messages
    function loadMessages() {
        fetch(`/Chats/GetMessages?friendId=${friendId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(messages => {
                console.log("Initial messages loaded:", messages);
                const chatBox = document.getElementById("chat-box");
                chatBox.innerHTML = "";

                messages.reverse().forEach(msg => {
                    addMessageToChat(msg);
                });
            })
            .catch(error => console.error("Error fetching messages:", error));
    }

    // Handle receiving messages via SignalR
    connection.on("ReceiveMessage", function (message) {
        console.log("Message received via SignalR:", message);
        addMessageToChat(message);
    });

    // Send a message
    function sendMessage() {
        const content = document.getElementById("messageContent").value.trim();
        if (!content) return;

        const messageData = {
            receiverId: friendId,
            content: content
        };

        console.log("Sending message:", messageData);

        fetch('/Chats/SendMessage', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(messageData)
        })
            .then(response => {
                console.log("Response status:", response.status);
                return response.json();
            })
            .then(data => {
                console.log("Message sent response:", data);
                if (data.error) {
                    console.error("Server error:", data.error);
                } else {
                    document.getElementById("messageContent").value = "";
                    // No need to reload all messages as SignalR will push the new message
                }
            })
            .catch(error => console.error("Error sending message:", error));
    }

    // Connect to SignalR hub
    connection.start()
        .then(() => {
            console.log("SignalR Connected");
            // Load initial messages after connection is established
            loadMessages();
        })
        .catch(err => {
            console.error("SignalR Connection Error: ", err);
            // If SignalR fails, fall back to polling
            loadMessages();
            setInterval(loadMessages, 5000);
        });

    // Add event listener for Enter key in the message input
    document.getElementById("messageContent").addEventListener("keypress", function (event) {
        if (event.key === "Enter" && !event.shiftKey) {
            event.preventDefault();
            sendMessage();
        }
    });
</script>
-->